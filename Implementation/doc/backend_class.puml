@startuml backend

skinparam nodesep 100
skinparam ranksep 100
skinparam linetype ortho

package benchmark {
	class JsonParser {
		benchmarkResultFromJson(sha: String, device: String, json: String, blas: Boolean): List<BenchmarkResult>
	}

	class Component {
		getName(): String
		getRuntime(): Double
	}

	interface MatrixBenchmarkResult {
		getDatapoints(): List<MatrixDatapoint>
	}
interface MatrixDatapoint {
		getRows(): Long
		getColumns(): Long
		getNonzeros(): Long
	}

	MatrixBenchmarkResult *- MatrixDatapoint

	class ConversionBenchmarkResult {
		getDatapoints(): List<ConversionDatapoint>
	}

	class ConversionDatapoint {
		getConversions(): List<Conversion>
	}

	class Conversion {
		getName(): String
		getTime(): Double
		isCompleted(): Boolean
	}

	ConversionBenchmarkResult *- ConversionDatapoint
	ConversionDatapoint *- Conversion

	MatrixBenchmarkResult <|.. ConversionBenchmarkResult
	MatrixDatapoint <|.. ConversionDatapoint


	class SolverBenchmarkResult {
		getDatapoints(): List<SolverDatapoint>
	}

	class SolverDatapoint {
		getSolvers(): List<Solver>
	}

	class Solver {
		getName(): String
		getRecurrentResiduals(): List<Double>
		getTrueResiduals(): List<Double>
		getImplicitResiduals(): List<Double>
		getIterationResiduals(): List<Double>
		getRhsNorm(): Double
		getResidualNorm(): Double
		isCompleted(): Boolean
		getGenerateComponents(): List<Component>
		getGenerateTotalTime(): Double
		getApplyComponents(): List<Component>
		getApplyTotalTime(): Double
		getApplyIterations(): Long
	}
	
	SolverBenchmarkResult *- SolverDatapoint
	SolverDatapoint *- Solver
	Solver *-- Component

	MatrixBenchmarkResult <|... SolverBenchmarkResult
	MatrixDatapoint <|... SolverDatapoint

	ConversionBenchmarkResult --[hidden] SolverBenchmarkResult
	ConversionDatapoint --[hidden] SolverDatapoint
	Conversion --[hidden] Solver

	class SpmvBenchmarkResult {
		getDatapoints(): List<SpmvDatapoint>
	}

	class SpmvDatapoint {
		getFormats(): List<Format>
	}

	class Format {
		getName(): String
		getTime(): Double
		isCompleted(): Boolean
		getStorage(): Long
		getMaxRelativeNorm2(): Double
	}

	SpmvBenchmarkResult *- SpmvDatapoint
	SpmvDatapoint *- Format

	MatrixBenchmarkResult <|.... SpmvBenchmarkResult
	MatrixDatapoint <|.... SpmvDatapoint

	SolverBenchmarkResult --[hidden] SpmvBenchmarkResult
	SolverDatapoint --[hidden] SpmvDatapoint
	Solver --[hidden] Format
	Format -[hidden] Component

	class PreconditionerBenchmarkResult {
		getDatapoints(): List<PreconditionerDatapoint>
	}

	class PreconditionerDatapoint {
		getFormats(): List<Preconditioner>
	}

	class Preconditioner {
		getName(): String
		getTime(): Double
		isCompleted(): Boolean
		getStorage(): Long
		getMaxRelativeNorm2(): Double
	}

	PreconditionerBenchmarkResult *- PreconditionerDatapoint
	PreconditionerDatapoint *- Preconditioner
	Component --* Preconditioner

	MatrixBenchmarkResult <|.....left PreconditionerBenchmarkResult
	MatrixDatapoint <|..... PreconditionerDatapoint

	SpmvBenchmarkResult --[hidden] PreconditionerBenchmarkResult
	SpmvDatapoint --[hidden] PreconditionerDatapoint
	Format --[hidden] Preconditioner

	class BlasBenchmarkResult {
		getDatapoints(): List<BlasDatapoint>
	}

	class BlasDatapoint {
		getN(): Long
		getR(): Long
		getM(): Long
		getK(): Long
	}

	class Operation {
		getName(): String
		getTime(): Double
		getFlops(): Double
		getBandwidth(): Double
		isCompleted(): Boolean
		getRepetitions(): Long
	}

	BlasBenchmarkResult *- BlasDatapoint
	BlasDatapoint *- Operation

	PreconditionerBenchmarkResult --[hidden] BlasBenchmarkResult
	PreconditionerDatapoint --[hidden] BlasDatapoint
	Preconditioner --[hidden] Operation
}

package git {
	interface BenchmarkResult {
		getCommit(): Commit
		getDevice(): Device
		getBenchmark(): BenchmarkType
		getDatapoints(): List<Datapoint>
		getSummaryValues(): List<String, Double>
	}

	interface Datapoint {
		serializeComponentsToJson(): String
	}

	BenchmarkResult -> Datapoint
	Datapoint -[hidden] RepositoryHandler

	BenchmarkResult o-- BenchmarkType
	BenchmarkResult o-- Commit
	BenchmarkResult o-- Device

	enum BenchmarkType {
		Blas
		Spmv
		Preconditioner
		Solver
		Conversion
	}

	class CachingRepositoryHandler {
		- component: RepositoryHandler
	}

	class Commit {
		getSha(): String
		getMessage(): String
		getDate(): Date
		getAuthor(): String
	}

	class Device {
		getName(): String
	}

	interface RepositoryHandler {
		fetchGitHistory(branch: String, page: Int, benchmarkType: BenchmarkType): List<Commit>
		getAvailableBranches(): List<String>
	}

	RepositoryHandler <|.. CachingRepositoryHandler
	RepositoryHandler --* CachingRepositoryHandler
	RepositoryHandler --> BenchmarkType
	RepositoryHandler --> Commit
}

BlasBenchmarkResult .[norank].|> BenchmarkResult
PreconditionerBenchmarkResult .[norank].|> BenchmarkResult
SpmvBenchmarkResult .[norank].|> BenchmarkResult
SolverBenchmarkResult .[norank].|> BenchmarkResult
ConversionBenchmarkResult .[norank].|> BenchmarkResult

BlasDatapoint .[norank].|> Datapoint
PreconditionerDatapoint .[norank].|> Datapoint
SpmvDatapoint .[norank].|> Datapoint
SolverDatapoint .[norank].|> Datapoint
ConversionDatapoint .[norank].|> Datapoint

JsonParser -[norank]> BenchmarkResult

package database {
	package exposed {
		class ExposedJsonHandler
	}
	class AnnotatingRepositoryHandler {
		- component: RepositoryHandler
		- databaseHandler: DatabaseHandler
	}

	interface DatabaseHandler {
		insertBenchmarkResult(results: List<BenchmarkResult>)
		fetchBenchmarkResult(commit: Commit, device: Device, benchmark: BenchmarkType): BenchmarkResult
		hasDataAvailable(commit: Commit, device: Device, benchmark: BenchmarkType): Boolean
		getAvailableDevices(commit: Commit, benchmark: BenchmarkType): List<Device>
	}

	class MissingBenchmarkResultException

	AnnotatingRepositoryHandler o- DatabaseHandler

	DatabaseHandler <|.. ExposedJsonHandler
}

DatabaseHandler -[norank]> BenchmarkResult
DatabaseHandler -[norank]> BenchmarkType
DatabaseHandler -[norank]> Commit
DatabaseHandler -[norank]> Device

AnnotatingRepositoryHandler *-[norank] RepositoryHandler
AnnotatingRepositoryHandler .[norank]|> RepositoryHandler
Component -[hidden] MissingBenchmarkResultException


package processing {
	package transforms {
		interface PlotTransform {
			getNumInputsRange(): IntRange
			getPlottableAs(): List<PlotType>
			getName(): String
			getAvailableOptions(): List<PlotOption>
			transform(results: List<BenchmarkResult>, options: Map<String, String>): PlottableData
		}

		interface BlasPlotTransform {
			transformBlas(results: List<BlasBenchmarkResult>): PlottableData
		}
		interface SpmvPlotTransform {
			transformSpmv(results: List<SpmvBenchmarkResult>): PlottableData
		}

		interface ConversionPlotTransform {
			transformConversion(results: List<ConversionBenchmarkResult>): PlottableData
		}

		interface PreconditionerPlotTransform {
			transformPreconditioner(results: List<PreconditionerBenchmarkResult>): PlottableData
		}

		interface SolverPlotTransform {
			transformSolver(results: List<SolverBenchmarkResult>): PlottableData
		}

		interface PlottableData
		class DatasetSeries

		PlotTransform <|.. BlasPlotTransform
		PlotTransform <|.. SpmvPlotTransform
		PlotTransform <|.. ConversionPlotTransform
		PlotTransform <|.. PreconditionerPlotTransform
		PlotTransform <|.. SolverPlotTransform

		PlotTransform -> PlottableData
		PlottableData <|. DatasetSeries
	}

	class AvailablePlots {
		getPlotByName(name: String): PlotTransform
		getPlotList(benchmark: BenchmarkType, numberInputs: Int): PlotList
	}

	class PlotList {
		getScatter(): List<PlotDescription>
		getLine(): List<PlotDescription>
		getBar(): List<PlotDescription>
		getStackedBar(): List<PlotDescription>
	}

	class PlotDescription {
		getPlotName(): String
		getOptions(): List<PlotOption>
	}

	class PlotOption {
		getName(): String
		getOptions(): List<String>
		isNumber(): Boolean
	}

	AvailablePlots -> PlotList
	AvailablePlots -> PlotTransform


	PlotList o-- PlotDescription
	PlotDescription o-- PlotOption

	enum PlotType {
		Line
		Scatter
		Bar
		StackedBar
	}

	PlotTransform -[norank]> PlotType
	PlotTransform -[norank]> PlotOption
}

SpmvBenchmarkResult <|.[norank] SpmvPlotTransform
SolverBenchmarkResult <|.[norank] SolverPlotTransform
ConversionBenchmarkResult <|.[norank] ConversionPlotTransform
BlasBenchmarkResult <|.[norank] SpmvPlotTransform
PreconditionerBenchmarkResult <|.[norank] PreconditionerPlotTransform

BenchmarkResult <-[norank] PlotTransform
Operation --[hidden] PlotTransform

package rest {
	class GitApiHandler

	interface RestHandler {
		handlePost(sha: String, device: String, blas: Boolean, json: String)
		handleGetHistory(branch: String, page: Int, benchmark: String): String
		handleGetPlotData(benchmark: String, shas: List<String>, devices: List<String>, plotType: String, plotParams: Map<String, String>): String
		getAvailableBranches(): String
		getAvailablePlots(benchmark: String, shas: List<String>, devices: List<String>): String
		getAvailableBenchmarks(): String
	}

	class SpringRestHandler

	RestHandler <|.. SpringRestHandler
}

PlotOption --[hidden] RestHandler

RepositoryHandler <|.[norank] GitApiHandler

RepositoryHandler <-[norank] RestHandler
DatabaseHandler <-[norank] RestHandler
AvailablePlots <-[norank] RestHandler

class Config 

@enduml
