@startuml frontend

skinparam nodesep 100
skinparam ranksep 100
skinparam linetype ortho
skinparam classAttributeIconSize 0


package app {

  class AppComponent {
    title: string
  }

  package dialogs {

    class CookieConsentDialogComponent {
      cookies_storing_plot_configs: boolean

      toggleStoringPlotConfigs(): void
      saveSettings(): void

    }

    class LoadFromTemplateDialogComponent {
      'TODO(implement)
    }

    class PlotConfigurationDialogComponent {
      benchmarkName: string
      commitsAndDevices: Pair[]
      availablePlots: AvailablePlotTypes
      availablePlotTypeKeys: SupportedChartType[]
      currentPlotTypeKey: SupportedChartType
      availablePlotTypeOptions: PlotTypeOption[]
      currentPlotTypeOption: PlotTypeOption
      availablePlotOptions: PlotOption[]
      currentPlotOptions: { [key: string]: string | number }
      plotlabelTitle: string
      plotlabelXAxis: string
      plotlabelYAxis: string

      togglePanel(): void
      filterOutEmptyPlotTypeKeys(): void
      updatePlotTypeKey(): void
      updatePlotTypeOption(): void
      navigateToPlotView(): void
      saveAndStoreCurrentConfig(): void
      compilePlotConfig(): PlotConfiguration

      -fetchAvailablePlots()
      -resetPlotTypeKeyValues()

    }

  }


  package header {

    class HeaderComponent {}

  }

  package main-content {

    class BarPlotComponent {
      +chartOptions: ChartOptions

      readParams(params: Observable<ParamMap>): void
      updateChart(): void
      downloadCanvas(event: any): void
    }

    class LinePlotComponent {
      +chartOptions: ChartOptions

      readParams(params: Observable<ParamMap>): void
      updateChart(): void
      downloadCanvas(event: any): void
    }

    class ScatterPlotComponent {

      +chartOptions: ChartOptions

      readParams(params: Observable<ParamMap>): void
      updateChart(): void
      downloadCanvas(event: any): void
    }
  }

  package dashboard {

    class AveragePerformanceComponent {
      +chartOptions: ChartOptions

      update(): void
    }

    class GitHistoryComponent {
      currentlySelectedBranch: string
      branchNames: string[]
      currentlySelectedBenchmarkName: string
      benchmarkNames: string[]
      hideUnusableCommits: boolean
      commits: Commit[]
      selected: { commit: Commit, device: string }[]

      updateCommitHistory(): void
      selectBranch(branchChoice: string): void
      selectBenchmarkName(benchmarkNameChoice: string): void
      selectCommit(commit: Commit): void
      selectDevice(commit: Commit, device: string, checked: boolean): void

    }


  }

  package sidebar {

    class SidebarComponent {}

    class SideCurrentChosenCommitComponent {
      configurePlot(): void

    }

    class SideLoadFromTemplateComponent {
      'TODO(implement)
    }

    class SidePreviousPlotsComponent {
      recentPlotConfigurations: PlotConfiguration[]

      navigateToPlotView(config: PlotConfiguration): void

    }

  }

}

package lib {

  package directives {

    class SummaryCardComponent {
      'TODO what about the @Input annotation
      commitSha: string
      device: string
      benchmarkType: string
    }

  }

  package notificationhandler {

    class SnackBarService {
      notify(message: string): void
    }

  }

  package pipes {

    class AbbreviatePipe {
      transform(value: string, length: number): string
    }

    class DefaultValuePipe {
      transform(value: string, defaultValue: string): string
    }

  }

  package plot-component-util {

    class PlotUtils {

      {static} +parsePlotConfig(paramMap: ParamMap): PlotConfiguration | undefined

    }

  }

}


package logic {

  package commit-selection-handler {

    class CommitSelectionService {
      private selectedCommits: SelectedCommits

      updateBenchmarkName(benchmarkName: string): void
      addCommit(benchmarkName: string, commit: Commit, device: string): void
      removeCommit(commit: Commit, device: string): void
      getSelectedCommits(): SelectedCommits
    }

    interface SelectedCommits {
      benchmarkName: string
      commitsAndDevices: Pair[]
    }

    interface Pair {
      commit: Commit
      device: string
    }

  }

  package cookiehandler {

    class CookieService {
      +recentPlotsUpdate: EventEmitter<void>

      -NAME_SETTINGS: string
      -NAME_RECENT_BRANCH: string
      -NAME_RECENT_PLOT_CONFIGS: string

      spawnConsentDialog(): void
      hasDecidedConsent(): boolean
      saveSettings(settings: CookieSettings): void
      getMostRecentBranch(): string | null
      saveMostRecentBranch(branchName: string): void
      addRecentPlotConfiguration(plotConfig: PlotConfiguration): void
      public getRecentPlotConfigurations(): PlotConfiguration[]

    }

    interface CookieSettings {
      storingPlotConfigs: boolean
    }

  }

  package datahandler {

    class DataService{
      -url: string

      getBranchNames(): Observable<string[]>
      getBenchmarks(): Observable<string[]>
      getCommitHistory(branchName: string, benchmarkType: string, page: number = 1): Observable<Commit[]>
      getAvailablePlots(benchmarkType: string, commits: Commit[], devices: string[]): Observable<AvailablePlotTypes>
      getPlotData(config: PlotConfiguration): Observable<ChartDataSets[]>
      getSummary(benchmarkType: string, commitSha: string, device: string): Observable<Summary>
    }

    interface Commit {
      date(): Date
      message(): string
      author(): string
      sha(): string
      branch(): string
      availableDevices(): { name: string }[]
    }

    interface Summary {
      [key: string]: number
    }


  }

  package plothandler {
    class PlotServcie {

    }

    interface AvailiablePlotTypes {
      line(): PlotTypeOption[]
      scatter(): PlotTypeOption[]
      bar(): PlotTypeOption[]
      stackedBar(): PlotTypeOption[]
    }

    interface PlotTypeOption {
      plotName(): string
      options(): PlotOption[]
    }

    interface PlotOption {
      name(): string
      options(): string[]
      number(): boolean
    }

}

@enduml
