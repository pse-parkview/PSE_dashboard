name: CI

on:
  push:
    branches:
      - release
      - develop
  pull_request:
    branches:
      - release
      - develop
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Creates dist folder because apparently we have to?
        run: mkdir -p dist/frontend

      - name: Runs build
        run: npm run build

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Runs tests
        run: npm run test:ci

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')"
        id: extract_branch

      - name: Extract coverage
        shell: bash
        run: |
          percent=$(grep "{\"total\": {\"lines\":{\"total\":[0-9]*,\"covered\":[0-9]*,\"skipped\":[0-9]*,\"pct\":[0-9]*\\.[0-9]*}" coverage/frontend/coverage-summary.json -o | grep "\"pct\":.*" -o | sed "s/[^0-9\.]//g")
          echo "##[set-output name=percent;]$([ -z "$percent" ] && echo "0" || echo "$percent")"
        id: extract_coverage
        
      - name: echo
        run: echo ${{ steps.extract_coverage.outputs.percent }}

      - name: Generate Coverage Badge
        uses: taDachs/stupid-coverage-badge-generator@2c57de03ae2eb09b5d431b1cd62aa3b873fedc41
        with:
          percent: ${{ steps.extract_coverage.outputs.percent }}
          text: ${{ steps.extract_branch.outputs.branch }}-coverage frontend
          output-path: ./

      - name: Upload Badge
        uses: exuanbo/actions-deploy-gist@v1
        with:
          token: ${{ secrets.BADGES_GIST_SECRET }}
          gist_id: 2f350a3c58fed9515b658495edc70191
          gist_file_name: parkview_${{ steps.extract_branch.outputs.branch }}_frontend_coverage.svg
          file_path: ./badge.svg

  analyse:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v2

      - name: Get the lines of code.
        id: scc
        uses: iryanbell/scc-docker-action@v1.0.2
        with:
          args: . --ci -i ts,html,scss

      - name: Generate LOC Badge
        shell: bash
        run: |
          curl https://img.shields.io/badge/frontend%20lines%20of%20code-$(echo "${{ steps.scc.outputs.scc }}" | grep Total | awk '{print $6}')-blue > badge.svg

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')"
        id: extract_branch

      - name: Upload Badge
        uses: exuanbo/actions-deploy-gist@v1
        with:
          token: ${{ secrets.BADGES_GIST_SECRET }}
          gist_id: 2f350a3c58fed9515b658495edc70191
          gist_file_name: parkview_${{ steps.extract_branch.outputs.branch }}_frontend_loc.svg
          file_path: ./badge.svg

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Runs linter
        run: npm run lint
        
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/release'
    
    steps:
      - name: echo
        run: ls
        
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist/frontend
