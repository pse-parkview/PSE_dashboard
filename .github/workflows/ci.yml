name: CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  build-backend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b

      - name: Build with Gradle
        run: ./gradlew build -x test -x ktlintMainSourceSetCheck -x ktlintTestSourceSetCheck
        working-directory: Implementation/backend/

  test-backend:
    runs-on: ubuntu-latest
    needs: build-backend

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b

      - name: Test with Gradle
        run: ./gradlew test
        working-directory: Implementation/backend/

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')"
        id: extract_branch

      - name: Generate Jacoco Badge
        uses: cicirello/jacoco-badge-generator@v2
        id: jacoco
        with:
          jacoco-csv-file: Implementation/backend/build/reports/jacoco/test/jacocoTestReport.csv
          generate-branches-badge: false
          generate-coverage-badge: false

      - name: Calculate percentage
        id: calc
        shell: bash
        run: |
          echo "##[set-output name=percentage;]$(echo "${{ steps.jacoco.outputs.coverage }} * 100" | bc)"

      - name: Generate Coverage Badge
        uses: taDachs/stupid-coverage-badge-generator@initial
        with:
          percent: ${{ steps.calc.outputs.percentage }}
          text: ${{ steps.extract_branch.outputs.branch }}-coverage backend
          output-path: ./

      - name: Upload Badge
        uses: exuanbo/actions-deploy-gist@v1
        with:
          token: ${{ secrets.BADGES_GIST_SECRET }}
          gist_id: 2f350a3c58fed9515b658495edc70191
          gist_file_name: parkview_${{ steps.extract_branch.outputs.branch }}_backend_coverage.svg
          file_path: ./badge.svg

  analyse-backend:
    runs-on: ubuntu-latest
    needs: build-backend

    steps:
      - uses: actions/checkout@v2

      - name: Generate LOC Badge
        shell: bash
        run: |
          curl https://img.shields.io/badge/backend%20lines%20of%20code-$(( find Implementation/backend/src/main/kotlin/ -name '*.kt' -print0 | xargs -0 cat ) | wc -l)-blueviolet > badge.svg

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')"
        id: extract_branch

      - name: Upload Badge
        uses: exuanbo/actions-deploy-gist@v1
        with:
          token: ${{ secrets.BADGES_GIST_SECRET }}
          gist_id: 2f350a3c58fed9515b658495edc70191
          gist_file_name: parkview_${{ steps.extract_branch.outputs.branch }}_backend_loc.svg
          file_path: ./badge.svg

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b

      - name: Run linter
        run: ./gradlew ktlintCheck
        working-directory: Implementation/backend/


  build-frontend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: Implementation/frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        working-directory: Implementation/frontend
        run: npm install

      - name: Runs build
        working-directory: Implementation/frontend
        run: npm run build

  test-frontend:
    runs-on: ubuntu-latest
    needs: build-frontend

    steps:
      - uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: Implementation/frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        working-directory: Implementation/frontend
        run: npm install

      - name: Runs tests
        working-directory: Implementation/frontend
        run: npm run test:ci

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')"
        id: extract_branch

      - name: Extract coverage
        shell: bash
        run: |
          echo "##[set-output name=percent;]$(grep "{\"total\": {\"lines\":{\"total\":[0-9]*,\"covered\":[0-9]*,\"skipped\":[0-9]*,\"pct\":[0-9]*\\.[0-9]*}" Implementation/frontend/coverage/frontend/coverage-summary.json -o | grep "\"pct\":.*" -o | sed "s/[^0-9\.]//g")"
        id: extract_coverage

      - name: Generate Coverage Badge
        uses: taDachs/stupid-coverage-badge-generator@2c57de03ae2eb09b5d431b1cd62aa3b873fedc41
        with:
          percent: ${{ steps.extract_coverage.outputs.percent }}
          text: ${{ steps.extract_branch.outputs.branch }}-coverage frontend
          output-path: ./

      - name: Upload Badge
        uses: exuanbo/actions-deploy-gist@v1
        with:
          token: ${{ secrets.BADGES_GIST_SECRET }}
          gist_id: 2f350a3c58fed9515b658495edc70191
          gist_file_name: parkview_${{ steps.extract_branch.outputs.branch }}_frontend_coverage.svg
          file_path: ./badge.svg

  analyse-frontend:
    runs-on: ubuntu-latest
    needs: build-frontend

    steps:
      - uses: actions/checkout@v2

      - name: Generate LOC Badge
        shell: bash
        run: |
          (find Implementation/frontend/src -regex '.*[^(spec)]\.\(\(ts\)\|\(scss\)\|\(html\)\)' -print0 | xargs -0 cat ) | wc -l | xargs -I '{}' echo https://img.shields.io/badge/frontend%20lines%20of%20code-{}-blue | xargs curl > badge.svg

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')"
        id: extract_branch

      - name: Upload Badge
        uses: exuanbo/actions-deploy-gist@v1
        with:
          token: ${{ secrets.BADGES_GIST_SECRET }}
          gist_id: 2f350a3c58fed9515b658495edc70191
          gist_file_name: parkview_${{ steps.extract_branch.outputs.branch }}_frontend_loc.svg
          file_path: ./badge.svg

  integration:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]

    steps:
    - uses: actions/checkout@v2

    - name: Setup Chrome
      uses: nanasess/setup-chromedriver@master

    - name: Setup Pyhon
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install Python dependencies
      uses: py-actions/py-dependency-install@v2
      with:
        path: QualityAssurance/integration_tests/requirements.txt

    - name: Run Tests
      working-directory: QualityAssurance/integration_tests/
      run: python3 main.py --backend http://localhost:8080/parkview --frontend http://0.0.0.0:4200 --github-token ${{ secrets.OAUTH_TOKEN }} --github-user ${{ secrets.OAUTH_USER }} --timeout 60

  docker:
    runs-on: ubuntu-latest
    needs: integration

    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend latest
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: docker/build-push-action@v2
        with:
          context: Implementation/backend/
          push: true
          tags: tadachs/parkview-backend:latest

      - name: Build and push frontend latest
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: docker/build-push-action@v2
        with:
          context: Implementation/frontend/
          push: true
          tags: tadachs/parkview-frontend:latest

      - name: Build and push backend nightly
        if: ${{ github.ref == 'refs/heads/develop' }}
        uses: docker/build-push-action@v2
        with:
          context: Implementation/backend/
          push: true
          tags: tadachs/parkview-backend:nightly

      - name: Build and push frontend nightly
        if: ${{ github.ref == 'refs/heads/develop' }}
        uses: docker/build-push-action@v2
        with:
          context: Implementation/frontend/
          push: true
          tags: tadachs/parkview-frontend:nightly

      - name: Deploy to demo server
        if: ${{ github.ref == 'refs/heads/develop' }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEMO_SERVER_HOST }}
          username: ${{ secrets.DEMO_SERVER_USER }}
          password: ${{ secrets.DEMO_SERVER_PASSWORD }}
          script: ${{ secrets.DEMO_SERVER_SCRIPT }}

