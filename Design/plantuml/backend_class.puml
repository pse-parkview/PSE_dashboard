@startuml backend

skinparam linetype ortho

package git {
  interface History {
   BranchForBenchmark getBranch(branch: String, benchmark: Benchmark)
  }

  interface RepositoryHandler {
    BranchForBenchmark fetchGitHistory(branch: String)
  }

  class Commit {
    parents: List<Commit> ' TODO: decide about that
    sha: String
    message: String
    date: java.util.Date
    benchmarkResultsByDevice: Map<Device, BenchmarkResult>
    String getCommitMessage()
    String getSha()
    BenchmarkResult getBenchmarkResult(device: Device)
    Commit getPreviousCommit()
  }
  
  
  class BranchForBenchmark {
    name: String
    benchmark: Benchmark
    commits: List<Commit>
    Commit getCommit(sha: String)
    List<Commit> toList()
  }
    
  interface BenchmarkResult {
    Commit getCommit()
    Benchmark getBenchmark()
    Device getDevice()
    String toJson()
    double getSummaryValue()
  }

  class Benchmark {
    # TODO add fields for other info
    name: String
  }

  class Device {
    # TODO add fields for other info
    name: String
  }

  class EmptyBenchmarkResult
  EmptyBenchmarkResult --|> BenchmarkResult
  
  History --> BranchForBenchmark
  History --> RepositoryHandler
  
  BranchForBenchmark o-- Commit
  Commit "1" -- "*" BenchmarkResult
}


package rest {
  class GitApiHandler
  class SpringRestHandler
  
  interface RestHandler {
    void handlePost(json: String)
    void handleGetHistory(json: String)
    void handleGetBenchmarkResult(json: String)
  }
   
  SpringRestHandler --|> RestHandler
}

package database {
  class PostgreSQLHandler
  
  interface DatabaseHandler {
    void updateCommits(commits: List<Commit>)
    void updateBenchmarkResults(results: List<BenchmarkResult>)
    BranchForBenchmark fetchBranch(branch: String, benchmark: Benchmark)
    BenchmarkResult fetchSingleBenchmarkResult(commit: Commit, device: Device, benchmark: Benchmark)
  }
  
  class HistoryDatabase

  class MissingCommitException
  class MissingBranchException
  class MissingBenchmarkResultException
  
  DatabaseHandler <- HistoryDatabase
  DatabaseHandler <|-- PostgreSQLHandler
  DatabaseHandler --> MissingCommitException
  DatabaseHandler --> MissingBranchException
  DatabaseHandler --> MissingBenchmarkResultException

  class BenchmarkResultDatabase
  
  DatabaseHandler <- BenchmarkResultDatabase
  
  class LazyBenchmarkResult {
    component: BenchmarkResult
  }

  DatabaseHandler <-- LazyBenchmarkResult
}

package benchmark {
  abstract class MatrixBenchmarkResult {
    datapoints: List<MatrixDatapoint>
  }

  abstract class MatrixDatapoint {
    filename: String
    rows: int
    columns: int
    nonzeros: int
  }

  class BlasDatapoint {
    n: int
    r: int
    m: int
    k: int
    operations: List<Operation>
  }

  class Operation {
    name: String
    time: double
    flops: double
    bandwidth: double
    completed: bool
  }

  class ConversionDatapoint {
    conversions: List<Conversion>
  }

  class Conversion {
    name: String
    time: double
    completed: bool
  }

  class SpmvDatapoint {
    formats: List<Format>
    optimal: Format
  }

  class Format {
    name: String
    storage: int
    time: double
    maxRelativeNorm2: double
    completed: bool
  }

  class PreconditionerDatapoint {
    preconditioners: List<Preconditioner>
  }

  class Preconditioner {
    name: String
    generateComponents: List<Component>
    generateTime: double
    applyComponents: List<Component>
    applyTime: double
    completed: bool
  }

  class SolverDatapoint {
    solvers: List<Solver>
  }

  class Solver {
    name: String
    recurrentResiduals: [double]
    trueResiduals: [double]
    implicitResiduals: [double]
    iterationTimestamps: [double]
    rhsNorm: [double]
    residualNorm: [double]
    completed: bool
    generateComponents: List<Component>
    generateTotalTime: double
    applyComponents: List<Component>
    applyTotalTime: double
    applyIterations: int
  }

  class Component {
    name: String
    runtime: double
  }

  interface RawBenchmarkResult {
    BenchmarkResult process()
  } 

  class DataProcessor {
    void storeBenchmarkResults(results: List<RawBenchmarkResult>)
  }

  interface BenchmarkResultStorage {
    void storeBenchmarkResults(results: List<BenchmarkResult>)
  }

  class SolverBenchmarkResult {
  }

  class SpmvBenchmarkResult {
  }

  class ConversionBenchmarkResult {
  }

  class PreconditionerBenchmarkResult {
  }

  class BlasBenchmarkResult {
    datapoints: List<BlasDatapoint>
  }

  RawBenchmarkResult <- DataProcessor
  BenchmarkResultStorage <- DataProcessor
  RawBenchmarkResult <|-- RawSolverBenchmarkResult
  RawBenchmarkResult <|--- RawSpmvBenchmarkResult
  RawBenchmarkResult <|---- RawConversionBenchmarkResult
  RawBenchmarkResult <|----- RawPreconditionerBenchmarkResult

  RawBenchmarkResult <|------- RawBlasBenchmarkResult
  
  MatrixBenchmarkResult <|-- SolverBenchmarkResult
  MatrixBenchmarkResult <|--- SpmvBenchmarkResult
  MatrixBenchmarkResult <|---- ConversionBenchmarkResult
  MatrixBenchmarkResult <|----- PreconditionerBenchmarkResult

  MatrixDatapoint <|-- SolverDatapoint
  MatrixDatapoint <|--- SpmvDatapoint
  MatrixDatapoint <|---- ConversionDatapoint
  MatrixDatapoint <|----- PreconditionerDatapoint

  RawSolverBenchmarkResult -> SolverBenchmarkResult: "process()"
  RawSpmvBenchmarkResult -> SpmvBenchmarkResult: "process()"
  RawConversionBenchmarkResult -> ConversionBenchmarkResult: "process()"
  RawPreconditionerBenchmarkResult -> PreconditionerBenchmarkResult: "process()"
  RawBlasBenchmarkResult -> BlasBenchmarkResult: "process()"

  MatrixBenchmarkResult -> MatrixDatapoint
  BlasBenchmarkResult -> BlasDatapoint
  PreconditionerBenchmarkResult -> PreconditionerDatapoint
  SpmvBenchmarkResult -> SpmvDatapoint
  SolverBenchmarkResult -> SolverDatapoint
  ConversionBenchmarkResult -> ConversionDatapoint

  BlasDatapoint -> Operation
  PreconditionerDatapoint -> Preconditioner
  SpmvDatapoint -> Format
  SolverDatapoint -> Solver
  ConversionDatapoint -> Conversion

  Solver --> Component
  Component --> Preconditioner
}

History <- RestHandler
History <|- HistoryDatabase
BenchmarkResultStorage <|- BenchmarkResultDatabase
RepositoryHandler <|- GitApiHandler
DatabaseHandler -> Commit
DatabaseHandler -> BenchmarkResult
HistoryDatabase -> BranchForBenchmark
BenchmarkResult <|- LazyBenchmarkResult
BenchmarkResult <|-- MatrixBenchmarkResult
BenchmarkResult <- LazyBenchmarkResult
BenchmarkResult <- RawBenchmarkResult
DataProcessor <- RestHandler

DatabaseHandler -> Device
DatabaseHandler -> Benchmark


@enduml
