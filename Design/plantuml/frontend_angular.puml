@startuml frontend_angular

skinparam linetype ortho

package ui {
    class RootComponent {
    }

    class HeaderComponent {
    }

    class SideBarComponent {
    }

    class MainContentComponent {
    }

    package sideBar {
        class SideBenchmarkSelectComponent {
        }

        class SideCurrentChosenCommitComponent {
        }

        class SidePreviousPlotsComponent {
        }

        package miniPlotCards {
            interface PlotCardComponent {
            }

            class PlotTypeACardComponent {
            }

            PlotCardComponent <|-- PlotTypeACardComponent
        }

        SidePreviousPlotsComponent "1" *-- "*" PlotCardComponent
    }

    package mainContent {
        interface MainContentCardComponent {
        }

        class AveragePerformanceComponent {
        }

        class GitHistoryComponent {
        }

        package plots {
            interface PlotComponent {
            }

            class PlotTypeAComponent {
            }

            PlotComponent <|-- PlotTypeAComponent
        }

        MainContentCardComponent <|-- AveragePerformanceComponent
        MainContentCardComponent <|-- GitHistoryComponent
        MainContentCardComponent <|-- PlotComponent

    }

    package dialogs {
        class PlotConfigurationDialogComponent {
        }
    }

    RootComponent "1" *-- "1" HeaderComponent
    RootComponent "1" *-- "1" SideBarComponent
    RootComponent "1" *-- "1" MainContentComponent

    SideBarComponent "1" *-- "1" SideBenchmarkSelectComponent
    SideBarComponent "1" *-- "1" SideCurrentChosenCommitComponent
    SideBarComponent "1" *-- "1" SidePreviousPlotsComponent

    MainContentComponent "1" *-- "*" MainContentCardComponent

}

package datahandler {
    class DataPointService <<@Injectable>>{
        List<Commit> getCommitHistory(branch: String, device: String, benchmark: String)
        void addDatapoint(datapoint: DataPoint)
    }

    class DatapointSelection {
    }

    class DataPoint {
    }

    DatapointSelection "1" o- "*" DataPoint
    ' DatapointSelection --> RestHandler
}

package plotter {
    class Plot {

    }

    class PlotHandler {
        Plot displayPlot(dps: DataPointSelection)
        String generateSummaryData(dps: DatapointSelection)
        void updatePlot(newPlot: Plot)
    }

    class PlotGenerator {
        Plot generatePlot(c: Configuration, currentPlot: Plot)
        draw(dps: DatapointSelection)
    }

    class SummaryGenerator {
        drawSummary(summary: String)
        addToCompared(summary: String)
    }
    note top: "unsure where to put that"

    PlotHandler --> SummaryGenerator
    PlotHandler --> PlotGenerator
    PlotGenerator --> Plot
}

@enduml
